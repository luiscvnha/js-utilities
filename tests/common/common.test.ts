import {
  isArrayLike,
  isAsyncIterable,
  isBigInt,
  isBoolean,
  isFunction,
  isIterable,
  isNonNullish,
  isNullableObject,
  isNullishOrEmpty,
  isNullishOrWhitespace,
  isNullish,
  isNumber,
  isObject,
  isPlainObject,
  isPromiseLike,
  isString,
  isSymbol,
} from "../../src/common";
import { Lazy } from "../../src/lazy";
import { List } from "../../src/list";
import { Queue } from "../../src/queue";
import { Stack } from "../../src/stack";
import { XPromise } from "../../src/xpromises";


const $null = null;
const $undefined = undefined;
const $true = true;
const $false = false;
const $trueObject = new Boolean(true);
const $falseObject = new Boolean();
const $_1 = -1;
const $0 = 0;
const $_0 = -0;
const $42 = 42;
const $NaN = NaN;
const $Infinity = Infinity;
const $_Infinity = -Infinity;
const $_1Object = new Number(-1);
const $0Object = new Number();
const $_0Object = new Number(-0);
const $42Object = new Number(42);
const $NaNObject = new Number(NaN);
const $InfinityObject = new Number(Infinity);
const $_InfinityObject = new Number(-Infinity);
const $_1BigInt = BigInt(-1);
const $0BigInt = BigInt(0);
const $_0BigInt = BigInt(-0);
const $42BigInt = BigInt(42);
const $emptyString = "";
const $whitespaceString = " ";
const $string = "asd";
const $emptyStringObject = new String();
const $whitespaceStringObject = new String(" ");
const $stringObject = new String("asd");
const $emptySymbol = Symbol();
const $symbol = Symbol("fgh");
const $arrowFunction = () => {};
const $functionExpression = function() {};
const $functionObject = new Function();
const $class = Array;
const $emptyObject = {};
const $nullPrototypeObject = Object.create(null);
const $date = new Date();
const $emptyArray = [] as any[];
const $array = [1, 2, 3];
const $sparseArray = new Array(3);
const $emptyArrayLike = { length: 0 };
const $arrayLike = { 0: 1, 1: 2, 2: 3, length: 3 };
const $nonArrayLike1 = { length: -1 };
const $nonArrayLike2 = { length: 1 };
const $nonArrayLike3 = { 0: 1 };
const $emptyList = new List();
const $list = new List(1, 2, 3);
const $map = new Map();
const $set = new Set();
const $queue = new Queue();
const $stack = new Stack();
const $lazy = new Lazy(() => ({}));
const $readableStream = new ReadableStream();
const $promise = new Promise(() => {});
const $xpromise = new XPromise(() => {});
const $promiseLike = { then: () => {} };
const $nonPromiseLike = { then: "asd" };


describe("common/", () => {

  test("isArrayLike", () => {
    expect(isArrayLike($emptyString)).toBe(true);
    expect(isArrayLike($whitespaceString)).toBe(true);
    expect(isArrayLike($string)).toBe(true);
    expect(isArrayLike($emptyStringObject)).toBe(true);
    expect(isArrayLike($whitespaceStringObject)).toBe(true);
    expect(isArrayLike($stringObject)).toBe(true);
    expect(isArrayLike($emptyArray)).toBe(true);
    expect(isArrayLike($array)).toBe(true);
    expect(isArrayLike($sparseArray)).toBe(true);
    expect(isArrayLike($emptyArrayLike)).toBe(true);
    expect(isArrayLike($arrayLike)).toBe(true);
    expect(isArrayLike($emptyList)).toBe(true);
    expect(isArrayLike($list)).toBe(true);

    expect(isArrayLike($null)).toBe(false);
    expect(isArrayLike($undefined)).toBe(false);
    expect(isArrayLike($true)).toBe(false);
    expect(isArrayLike($false)).toBe(false);
    expect(isArrayLike($trueObject)).toBe(false);
    expect(isArrayLike($falseObject)).toBe(false);
    expect(isArrayLike($_1)).toBe(false);
    expect(isArrayLike($0)).toBe(false);
    expect(isArrayLike($_0)).toBe(false);
    expect(isArrayLike($42)).toBe(false);
    expect(isArrayLike($NaN)).toBe(false);
    expect(isArrayLike($Infinity)).toBe(false);
    expect(isArrayLike($_Infinity)).toBe(false);
    expect(isArrayLike($_1Object)).toBe(false);
    expect(isArrayLike($0Object)).toBe(false);
    expect(isArrayLike($_0Object)).toBe(false);
    expect(isArrayLike($42Object)).toBe(false);
    expect(isArrayLike($NaNObject)).toBe(false);
    expect(isArrayLike($InfinityObject)).toBe(false);
    expect(isArrayLike($_InfinityObject)).toBe(false);
    expect(isArrayLike($_1BigInt)).toBe(false);
    expect(isArrayLike($0BigInt)).toBe(false);
    expect(isArrayLike($_0BigInt)).toBe(false);
    expect(isArrayLike($42BigInt)).toBe(false);
    expect(isArrayLike($emptySymbol)).toBe(false);
    expect(isArrayLike($symbol)).toBe(false);
    expect(isArrayLike($arrowFunction)).toBe(false);
    expect(isArrayLike($functionExpression)).toBe(false);
    expect(isArrayLike($functionObject)).toBe(false);
    expect(isArrayLike($class)).toBe(false);
    expect(isArrayLike($emptyObject)).toBe(false);
    expect(isArrayLike($nullPrototypeObject)).toBe(false);
    expect(isArrayLike($date)).toBe(false);
    expect(isArrayLike($nonArrayLike1)).toBe(false);
    expect(isArrayLike($nonArrayLike2)).toBe(false);
    expect(isArrayLike($nonArrayLike3)).toBe(false);
    expect(isArrayLike($map)).toBe(false);
    expect(isArrayLike($set)).toBe(false);
    expect(isArrayLike($queue)).toBe(false);
    expect(isArrayLike($stack)).toBe(false);
    expect(isArrayLike($lazy)).toBe(false);
    expect(isArrayLike($readableStream)).toBe(false);
    expect(isArrayLike($promise)).toBe(false);
    expect(isArrayLike($xpromise)).toBe(false);
    expect(isArrayLike($promiseLike)).toBe(false);
    expect(isArrayLike($nonPromiseLike)).toBe(false);
  });

  test("isAsyncIterable", () => {
    expect(isAsyncIterable($readableStream)).toBe(true);

    expect(isAsyncIterable($null)).toBe(false);
    expect(isAsyncIterable($undefined)).toBe(false);
    expect(isAsyncIterable($true)).toBe(false);
    expect(isAsyncIterable($false)).toBe(false);
    expect(isAsyncIterable($trueObject)).toBe(false);
    expect(isAsyncIterable($falseObject)).toBe(false);
    expect(isAsyncIterable($_1)).toBe(false);
    expect(isAsyncIterable($0)).toBe(false);
    expect(isAsyncIterable($_0)).toBe(false);
    expect(isAsyncIterable($42)).toBe(false);
    expect(isAsyncIterable($NaN)).toBe(false);
    expect(isAsyncIterable($Infinity)).toBe(false);
    expect(isAsyncIterable($_Infinity)).toBe(false);
    expect(isAsyncIterable($_1Object)).toBe(false);
    expect(isAsyncIterable($0Object)).toBe(false);
    expect(isAsyncIterable($_0Object)).toBe(false);
    expect(isAsyncIterable($42Object)).toBe(false);
    expect(isAsyncIterable($NaNObject)).toBe(false);
    expect(isAsyncIterable($InfinityObject)).toBe(false);
    expect(isAsyncIterable($_InfinityObject)).toBe(false);
    expect(isAsyncIterable($_1BigInt)).toBe(false);
    expect(isAsyncIterable($0BigInt)).toBe(false);
    expect(isAsyncIterable($_0BigInt)).toBe(false);
    expect(isAsyncIterable($42BigInt)).toBe(false);
    expect(isAsyncIterable($emptyString)).toBe(false);
    expect(isAsyncIterable($whitespaceString)).toBe(false);
    expect(isAsyncIterable($string)).toBe(false);
    expect(isAsyncIterable($emptyStringObject)).toBe(false);
    expect(isAsyncIterable($whitespaceStringObject)).toBe(false);
    expect(isAsyncIterable($stringObject)).toBe(false);
    expect(isAsyncIterable($emptySymbol)).toBe(false);
    expect(isAsyncIterable($symbol)).toBe(false);
    expect(isAsyncIterable($arrowFunction)).toBe(false);
    expect(isAsyncIterable($functionExpression)).toBe(false);
    expect(isAsyncIterable($functionObject)).toBe(false);
    expect(isAsyncIterable($class)).toBe(false);
    expect(isAsyncIterable($emptyObject)).toBe(false);
    expect(isAsyncIterable($nullPrototypeObject)).toBe(false);
    expect(isAsyncIterable($date)).toBe(false);
    expect(isAsyncIterable($emptyArray)).toBe(false);
    expect(isAsyncIterable($array)).toBe(false);
    expect(isAsyncIterable($sparseArray)).toBe(false);
    expect(isAsyncIterable($emptyArrayLike)).toBe(false);
    expect(isAsyncIterable($arrayLike)).toBe(false);
    expect(isAsyncIterable($nonArrayLike1)).toBe(false);
    expect(isAsyncIterable($nonArrayLike2)).toBe(false);
    expect(isAsyncIterable($nonArrayLike3)).toBe(false);
    expect(isAsyncIterable($emptyList)).toBe(false);
    expect(isAsyncIterable($list)).toBe(false);
    expect(isAsyncIterable($map)).toBe(false);
    expect(isAsyncIterable($set)).toBe(false);
    expect(isAsyncIterable($queue)).toBe(false);
    expect(isAsyncIterable($stack)).toBe(false);
    expect(isAsyncIterable($lazy)).toBe(false);
    expect(isAsyncIterable($promise)).toBe(false);
    expect(isAsyncIterable($xpromise)).toBe(false);
    expect(isAsyncIterable($promiseLike)).toBe(false);
    expect(isAsyncIterable($nonPromiseLike)).toBe(false);
  });

  test("isBigInt", () => {
    expect(isBigInt($_1BigInt)).toBe(true);
    expect(isBigInt($0BigInt)).toBe(true);
    expect(isBigInt($_0BigInt)).toBe(true);
    expect(isBigInt($42BigInt)).toBe(true);

    expect(isBigInt($null)).toBe(false);
    expect(isBigInt($undefined)).toBe(false);
    expect(isBigInt($true)).toBe(false);
    expect(isBigInt($false)).toBe(false);
    expect(isBigInt($trueObject)).toBe(false);
    expect(isBigInt($falseObject)).toBe(false);
    expect(isBigInt($_1)).toBe(false);
    expect(isBigInt($0)).toBe(false);
    expect(isBigInt($_0)).toBe(false);
    expect(isBigInt($42)).toBe(false);
    expect(isBigInt($NaN)).toBe(false);
    expect(isBigInt($Infinity)).toBe(false);
    expect(isBigInt($_Infinity)).toBe(false);
    expect(isBigInt($_1Object)).toBe(false);
    expect(isBigInt($0Object)).toBe(false);
    expect(isBigInt($_0Object)).toBe(false);
    expect(isBigInt($42Object)).toBe(false);
    expect(isBigInt($NaNObject)).toBe(false);
    expect(isBigInt($InfinityObject)).toBe(false);
    expect(isBigInt($_InfinityObject)).toBe(false);
    expect(isBigInt($emptyString)).toBe(false);
    expect(isBigInt($whitespaceString)).toBe(false);
    expect(isBigInt($string)).toBe(false);
    expect(isBigInt($emptyStringObject)).toBe(false);
    expect(isBigInt($whitespaceStringObject)).toBe(false);
    expect(isBigInt($stringObject)).toBe(false);
    expect(isBigInt($emptySymbol)).toBe(false);
    expect(isBigInt($symbol)).toBe(false);
    expect(isBigInt($arrowFunction)).toBe(false);
    expect(isBigInt($functionExpression)).toBe(false);
    expect(isBigInt($functionObject)).toBe(false);
    expect(isBigInt($class)).toBe(false);
    expect(isBigInt($emptyObject)).toBe(false);
    expect(isBigInt($nullPrototypeObject)).toBe(false);
    expect(isBigInt($date)).toBe(false);
    expect(isBigInt($emptyArray)).toBe(false);
    expect(isBigInt($array)).toBe(false);
    expect(isBigInt($sparseArray)).toBe(false);
    expect(isBigInt($emptyArrayLike)).toBe(false);
    expect(isBigInt($arrayLike)).toBe(false);
    expect(isBigInt($nonArrayLike1)).toBe(false);
    expect(isBigInt($nonArrayLike2)).toBe(false);
    expect(isBigInt($nonArrayLike3)).toBe(false);
    expect(isBigInt($emptyList)).toBe(false);
    expect(isBigInt($list)).toBe(false);
    expect(isBigInt($map)).toBe(false);
    expect(isBigInt($set)).toBe(false);
    expect(isBigInt($queue)).toBe(false);
    expect(isBigInt($stack)).toBe(false);
    expect(isBigInt($lazy)).toBe(false);
    expect(isBigInt($readableStream)).toBe(false);
    expect(isBigInt($promise)).toBe(false);
    expect(isBigInt($xpromise)).toBe(false);
    expect(isBigInt($promiseLike)).toBe(false);
    expect(isBigInt($nonPromiseLike)).toBe(false);
  });

  test("isBoolean", () => {
    expect(isBoolean($true)).toBe(true);
    expect(isBoolean($false)).toBe(true);

    expect(isBoolean($null)).toBe(false);
    expect(isBoolean($undefined)).toBe(false);
    expect(isBoolean($trueObject)).toBe(false);
    expect(isBoolean($falseObject)).toBe(false);
    expect(isBoolean($_1)).toBe(false);
    expect(isBoolean($0)).toBe(false);
    expect(isBoolean($_0)).toBe(false);
    expect(isBoolean($42)).toBe(false);
    expect(isBoolean($NaN)).toBe(false);
    expect(isBoolean($Infinity)).toBe(false);
    expect(isBoolean($_Infinity)).toBe(false);
    expect(isBoolean($_1Object)).toBe(false);
    expect(isBoolean($0Object)).toBe(false);
    expect(isBoolean($_0Object)).toBe(false);
    expect(isBoolean($42Object)).toBe(false);
    expect(isBoolean($NaNObject)).toBe(false);
    expect(isBoolean($InfinityObject)).toBe(false);
    expect(isBoolean($_InfinityObject)).toBe(false);
    expect(isBoolean($_1BigInt)).toBe(false);
    expect(isBoolean($0BigInt)).toBe(false);
    expect(isBoolean($_0BigInt)).toBe(false);
    expect(isBoolean($42BigInt)).toBe(false);
    expect(isBoolean($emptyString)).toBe(false);
    expect(isBoolean($whitespaceString)).toBe(false);
    expect(isBoolean($string)).toBe(false);
    expect(isBoolean($emptyStringObject)).toBe(false);
    expect(isBoolean($whitespaceStringObject)).toBe(false);
    expect(isBoolean($stringObject)).toBe(false);
    expect(isBoolean($emptySymbol)).toBe(false);
    expect(isBoolean($symbol)).toBe(false);
    expect(isBoolean($arrowFunction)).toBe(false);
    expect(isBoolean($functionExpression)).toBe(false);
    expect(isBoolean($functionObject)).toBe(false);
    expect(isBoolean($class)).toBe(false);
    expect(isBoolean($emptyObject)).toBe(false);
    expect(isBoolean($nullPrototypeObject)).toBe(false);
    expect(isBoolean($date)).toBe(false);
    expect(isBoolean($emptyArray)).toBe(false);
    expect(isBoolean($array)).toBe(false);
    expect(isBoolean($sparseArray)).toBe(false);
    expect(isBoolean($emptyArrayLike)).toBe(false);
    expect(isBoolean($arrayLike)).toBe(false);
    expect(isBoolean($nonArrayLike1)).toBe(false);
    expect(isBoolean($nonArrayLike2)).toBe(false);
    expect(isBoolean($nonArrayLike3)).toBe(false);
    expect(isBoolean($emptyList)).toBe(false);
    expect(isBoolean($list)).toBe(false);
    expect(isBoolean($map)).toBe(false);
    expect(isBoolean($set)).toBe(false);
    expect(isBoolean($queue)).toBe(false);
    expect(isBoolean($stack)).toBe(false);
    expect(isBoolean($lazy)).toBe(false);
    expect(isBoolean($readableStream)).toBe(false);
    expect(isBoolean($promise)).toBe(false);
    expect(isBoolean($xpromise)).toBe(false);
    expect(isBoolean($promiseLike)).toBe(false);
    expect(isBoolean($nonPromiseLike)).toBe(false);
  });

  test("isFunction", () => {
    expect(isFunction($arrowFunction)).toBe(true);
    expect(isFunction($functionExpression)).toBe(true);
    expect(isFunction($functionObject)).toBe(true);
    expect(isFunction($class)).toBe(true);

    expect(isFunction($null)).toBe(false);
    expect(isFunction($undefined)).toBe(false);
    expect(isFunction($true)).toBe(false);
    expect(isFunction($false)).toBe(false);
    expect(isFunction($trueObject)).toBe(false);
    expect(isFunction($falseObject)).toBe(false);
    expect(isFunction($_1)).toBe(false);
    expect(isFunction($0)).toBe(false);
    expect(isFunction($_0)).toBe(false);
    expect(isFunction($42)).toBe(false);
    expect(isFunction($NaN)).toBe(false);
    expect(isFunction($Infinity)).toBe(false);
    expect(isFunction($_Infinity)).toBe(false);
    expect(isFunction($_1Object)).toBe(false);
    expect(isFunction($0Object)).toBe(false);
    expect(isFunction($_0Object)).toBe(false);
    expect(isFunction($42Object)).toBe(false);
    expect(isFunction($NaNObject)).toBe(false);
    expect(isFunction($InfinityObject)).toBe(false);
    expect(isFunction($_InfinityObject)).toBe(false);
    expect(isFunction($_1BigInt)).toBe(false);
    expect(isFunction($0BigInt)).toBe(false);
    expect(isFunction($_0BigInt)).toBe(false);
    expect(isFunction($42BigInt)).toBe(false);
    expect(isFunction($emptyString)).toBe(false);
    expect(isFunction($whitespaceString)).toBe(false);
    expect(isFunction($string)).toBe(false);
    expect(isFunction($emptyStringObject)).toBe(false);
    expect(isFunction($whitespaceStringObject)).toBe(false);
    expect(isFunction($stringObject)).toBe(false);
    expect(isFunction($emptySymbol)).toBe(false);
    expect(isFunction($symbol)).toBe(false);
    expect(isFunction($emptyObject)).toBe(false);
    expect(isFunction($nullPrototypeObject)).toBe(false);
    expect(isFunction($date)).toBe(false);
    expect(isFunction($emptyArray)).toBe(false);
    expect(isFunction($array)).toBe(false);
    expect(isFunction($sparseArray)).toBe(false);
    expect(isFunction($emptyArrayLike)).toBe(false);
    expect(isFunction($arrayLike)).toBe(false);
    expect(isFunction($nonArrayLike1)).toBe(false);
    expect(isFunction($nonArrayLike2)).toBe(false);
    expect(isFunction($nonArrayLike3)).toBe(false);
    expect(isFunction($emptyList)).toBe(false);
    expect(isFunction($list)).toBe(false);
    expect(isFunction($map)).toBe(false);
    expect(isFunction($set)).toBe(false);
    expect(isFunction($queue)).toBe(false);
    expect(isFunction($stack)).toBe(false);
    expect(isFunction($lazy)).toBe(false);
    expect(isFunction($readableStream)).toBe(false);
    expect(isFunction($promise)).toBe(false);
    expect(isFunction($xpromise)).toBe(false);
    expect(isFunction($promiseLike)).toBe(false);
    expect(isFunction($nonPromiseLike)).toBe(false);
  });

  test("isIterable", () => {
    expect(isIterable($emptyString)).toBe(true);
    expect(isIterable($whitespaceString)).toBe(true);
    expect(isIterable($string)).toBe(true);
    expect(isIterable($emptyStringObject)).toBe(true);
    expect(isIterable($whitespaceStringObject)).toBe(true);
    expect(isIterable($stringObject)).toBe(true);
    expect(isIterable($emptyArray)).toBe(true);
    expect(isIterable($array)).toBe(true);
    expect(isIterable($sparseArray)).toBe(true);
    expect(isIterable($emptyList)).toBe(true);
    expect(isIterable($list)).toBe(true);
    expect(isIterable($map)).toBe(true);
    expect(isIterable($set)).toBe(true);
    expect(isIterable($queue)).toBe(true);
    expect(isIterable($stack)).toBe(true);

    expect(isIterable($null)).toBe(false);
    expect(isIterable($undefined)).toBe(false);
    expect(isIterable($true)).toBe(false);
    expect(isIterable($false)).toBe(false);
    expect(isIterable($trueObject)).toBe(false);
    expect(isIterable($falseObject)).toBe(false);
    expect(isIterable($_1)).toBe(false);
    expect(isIterable($0)).toBe(false);
    expect(isIterable($_0)).toBe(false);
    expect(isIterable($42)).toBe(false);
    expect(isIterable($NaN)).toBe(false);
    expect(isIterable($Infinity)).toBe(false);
    expect(isIterable($_Infinity)).toBe(false);
    expect(isIterable($_1Object)).toBe(false);
    expect(isIterable($0Object)).toBe(false);
    expect(isIterable($_0Object)).toBe(false);
    expect(isIterable($42Object)).toBe(false);
    expect(isIterable($NaNObject)).toBe(false);
    expect(isIterable($InfinityObject)).toBe(false);
    expect(isIterable($_InfinityObject)).toBe(false);
    expect(isIterable($_1BigInt)).toBe(false);
    expect(isIterable($0BigInt)).toBe(false);
    expect(isIterable($_0BigInt)).toBe(false);
    expect(isIterable($42BigInt)).toBe(false);
    expect(isIterable($emptySymbol)).toBe(false);
    expect(isIterable($symbol)).toBe(false);
    expect(isIterable($arrowFunction)).toBe(false);
    expect(isIterable($functionExpression)).toBe(false);
    expect(isIterable($functionObject)).toBe(false);
    expect(isIterable($class)).toBe(false);
    expect(isIterable($emptyObject)).toBe(false);
    expect(isIterable($nullPrototypeObject)).toBe(false);
    expect(isIterable($date)).toBe(false);
    expect(isIterable($emptyArrayLike)).toBe(false);
    expect(isIterable($arrayLike)).toBe(false);
    expect(isIterable($nonArrayLike1)).toBe(false);
    expect(isIterable($nonArrayLike2)).toBe(false);
    expect(isIterable($nonArrayLike3)).toBe(false);
    expect(isIterable($lazy)).toBe(false);
    expect(isIterable($readableStream)).toBe(false);
    expect(isIterable($promise)).toBe(false);
    expect(isIterable($xpromise)).toBe(false);
    expect(isIterable($promiseLike)).toBe(false);
    expect(isIterable($nonPromiseLike)).toBe(false);
  });

  test("isNonNullish", () => {
    expect(isNonNullish($true)).toBe(true);
    expect(isNonNullish($false)).toBe(true);
    expect(isNonNullish($trueObject)).toBe(true);
    expect(isNonNullish($falseObject)).toBe(true);
    expect(isNonNullish($_1)).toBe(true);
    expect(isNonNullish($0)).toBe(true);
    expect(isNonNullish($_0)).toBe(true);
    expect(isNonNullish($42)).toBe(true);
    expect(isNonNullish($NaN)).toBe(true);
    expect(isNonNullish($Infinity)).toBe(true);
    expect(isNonNullish($_Infinity)).toBe(true);
    expect(isNonNullish($_1Object)).toBe(true);
    expect(isNonNullish($0Object)).toBe(true);
    expect(isNonNullish($_0Object)).toBe(true);
    expect(isNonNullish($42Object)).toBe(true);
    expect(isNonNullish($NaNObject)).toBe(true);
    expect(isNonNullish($InfinityObject)).toBe(true);
    expect(isNonNullish($_InfinityObject)).toBe(true);
    expect(isNonNullish($_1BigInt)).toBe(true);
    expect(isNonNullish($0BigInt)).toBe(true);
    expect(isNonNullish($_0BigInt)).toBe(true);
    expect(isNonNullish($42BigInt)).toBe(true);
    expect(isNonNullish($emptyString)).toBe(true);
    expect(isNonNullish($whitespaceString)).toBe(true);
    expect(isNonNullish($string)).toBe(true);
    expect(isNonNullish($emptyStringObject)).toBe(true);
    expect(isNonNullish($whitespaceStringObject)).toBe(true);
    expect(isNonNullish($stringObject)).toBe(true);
    expect(isNonNullish($emptySymbol)).toBe(true);
    expect(isNonNullish($symbol)).toBe(true);
    expect(isNonNullish($arrowFunction)).toBe(true);
    expect(isNonNullish($functionExpression)).toBe(true);
    expect(isNonNullish($functionObject)).toBe(true);
    expect(isNonNullish($class)).toBe(true);
    expect(isNonNullish($emptyObject)).toBe(true);
    expect(isNonNullish($nullPrototypeObject)).toBe(true);
    expect(isNonNullish($date)).toBe(true);
    expect(isNonNullish($emptyArray)).toBe(true);
    expect(isNonNullish($array)).toBe(true);
    expect(isNonNullish($sparseArray)).toBe(true);
    expect(isNonNullish($emptyArrayLike)).toBe(true);
    expect(isNonNullish($arrayLike)).toBe(true);
    expect(isNonNullish($nonArrayLike1)).toBe(true);
    expect(isNonNullish($nonArrayLike2)).toBe(true);
    expect(isNonNullish($nonArrayLike3)).toBe(true);
    expect(isNonNullish($emptyList)).toBe(true);
    expect(isNonNullish($list)).toBe(true);
    expect(isNonNullish($map)).toBe(true);
    expect(isNonNullish($set)).toBe(true);
    expect(isNonNullish($queue)).toBe(true);
    expect(isNonNullish($stack)).toBe(true);
    expect(isNonNullish($lazy)).toBe(true);
    expect(isNonNullish($readableStream)).toBe(true);
    expect(isNonNullish($promise)).toBe(true);
    expect(isNonNullish($xpromise)).toBe(true);
    expect(isNonNullish($promiseLike)).toBe(true);
    expect(isNonNullish($nonPromiseLike)).toBe(true);

    expect(isNonNullish($null)).toBe(false);
    expect(isNonNullish($undefined)).toBe(false);
  });

  test("isNullableObject", () => {
    expect(isNullableObject($null)).toBe(true);
    expect(isNullableObject($undefined)).toBe(true);
    expect(isNullableObject($trueObject)).toBe(true);
    expect(isNullableObject($falseObject)).toBe(true);
    expect(isNullableObject($_1Object)).toBe(true);
    expect(isNullableObject($0Object)).toBe(true);
    expect(isNullableObject($_0Object)).toBe(true);
    expect(isNullableObject($42Object)).toBe(true);
    expect(isNullableObject($NaNObject)).toBe(true);
    expect(isNullableObject($InfinityObject)).toBe(true);
    expect(isNullableObject($_InfinityObject)).toBe(true);
    expect(isNullableObject($emptyStringObject)).toBe(true);
    expect(isNullableObject($whitespaceStringObject)).toBe(true);
    expect(isNullableObject($stringObject)).toBe(true);
    expect(isNullableObject($emptyObject)).toBe(true);
    expect(isNullableObject($nullPrototypeObject)).toBe(true);
    expect(isNullableObject($date)).toBe(true);
    expect(isNullableObject($emptyArray)).toBe(true);
    expect(isNullableObject($array)).toBe(true);
    expect(isNullableObject($sparseArray)).toBe(true);
    expect(isNullableObject($emptyArrayLike)).toBe(true);
    expect(isNullableObject($arrayLike)).toBe(true);
    expect(isNullableObject($nonArrayLike1)).toBe(true);
    expect(isNullableObject($nonArrayLike2)).toBe(true);
    expect(isNullableObject($nonArrayLike3)).toBe(true);
    expect(isNullableObject($emptyList)).toBe(true);
    expect(isNullableObject($list)).toBe(true);
    expect(isNullableObject($map)).toBe(true);
    expect(isNullableObject($set)).toBe(true);
    expect(isNullableObject($queue)).toBe(true);
    expect(isNullableObject($stack)).toBe(true);
    expect(isNullableObject($lazy)).toBe(true);
    expect(isNullableObject($readableStream)).toBe(true);
    expect(isNullableObject($promise)).toBe(true);
    expect(isNullableObject($xpromise)).toBe(true);
    expect(isNullableObject($promiseLike)).toBe(true);
    expect(isNullableObject($nonPromiseLike)).toBe(true);

    expect(isNullableObject($true)).toBe(false);
    expect(isNullableObject($false)).toBe(false);
    expect(isNullableObject($_1)).toBe(false);
    expect(isNullableObject($0)).toBe(false);
    expect(isNullableObject($_0)).toBe(false);
    expect(isNullableObject($42)).toBe(false);
    expect(isNullableObject($NaN)).toBe(false);
    expect(isNullableObject($Infinity)).toBe(false);
    expect(isNullableObject($_Infinity)).toBe(false);
    expect(isNullableObject($_1BigInt)).toBe(false);
    expect(isNullableObject($0BigInt)).toBe(false);
    expect(isNullableObject($_0BigInt)).toBe(false);
    expect(isNullableObject($42BigInt)).toBe(false);
    expect(isNullableObject($emptyString)).toBe(false);
    expect(isNullableObject($whitespaceString)).toBe(false);
    expect(isNullableObject($string)).toBe(false);
    expect(isNullableObject($emptySymbol)).toBe(false);
    expect(isNullableObject($symbol)).toBe(false);
    expect(isNullableObject($arrowFunction)).toBe(false);
    expect(isNullableObject($functionExpression)).toBe(false);
    expect(isNullableObject($functionObject)).toBe(false);
    expect(isNullableObject($class)).toBe(false);
  });

  test("isNullishOrEmpty", () => {
    expect(isNullishOrEmpty($null)).toBe(true);
    expect(isNullishOrEmpty($undefined)).toBe(true);
    expect(isNullishOrEmpty($emptyString)).toBe(true);

    expect(isNullishOrEmpty($true)).toBe(false);
    expect(isNullishOrEmpty($false)).toBe(false);
    expect(isNullishOrEmpty($trueObject)).toBe(false);
    expect(isNullishOrEmpty($falseObject)).toBe(false);
    expect(isNullishOrEmpty($_1)).toBe(false);
    expect(isNullishOrEmpty($0)).toBe(false);
    expect(isNullishOrEmpty($_0)).toBe(false);
    expect(isNullishOrEmpty($42)).toBe(false);
    expect(isNullishOrEmpty($NaN)).toBe(false);
    expect(isNullishOrEmpty($Infinity)).toBe(false);
    expect(isNullishOrEmpty($_Infinity)).toBe(false);
    expect(isNullishOrEmpty($_1Object)).toBe(false);
    expect(isNullishOrEmpty($0Object)).toBe(false);
    expect(isNullishOrEmpty($_0Object)).toBe(false);
    expect(isNullishOrEmpty($42Object)).toBe(false);
    expect(isNullishOrEmpty($NaNObject)).toBe(false);
    expect(isNullishOrEmpty($InfinityObject)).toBe(false);
    expect(isNullishOrEmpty($_InfinityObject)).toBe(false);
    expect(isNullishOrEmpty($_1BigInt)).toBe(false);
    expect(isNullishOrEmpty($0BigInt)).toBe(false);
    expect(isNullishOrEmpty($_0BigInt)).toBe(false);
    expect(isNullishOrEmpty($42BigInt)).toBe(false);
    expect(isNullishOrEmpty($whitespaceString)).toBe(false);
    expect(isNullishOrEmpty($string)).toBe(false);
    expect(isNullishOrEmpty($emptyStringObject)).toBe(false);
    expect(isNullishOrEmpty($whitespaceStringObject)).toBe(false);
    expect(isNullishOrEmpty($stringObject)).toBe(false);
    expect(isNullishOrEmpty($emptySymbol)).toBe(false);
    expect(isNullishOrEmpty($symbol)).toBe(false);
    expect(isNullishOrEmpty($arrowFunction)).toBe(false);
    expect(isNullishOrEmpty($functionExpression)).toBe(false);
    expect(isNullishOrEmpty($functionObject)).toBe(false);
    expect(isNullishOrEmpty($class)).toBe(false);
    expect(isNullishOrEmpty($emptyObject)).toBe(false);
    expect(isNullishOrEmpty($nullPrototypeObject)).toBe(false);
    expect(isNullishOrEmpty($date)).toBe(false);
    expect(isNullishOrEmpty($emptyArray)).toBe(false);
    expect(isNullishOrEmpty($array)).toBe(false);
    expect(isNullishOrEmpty($sparseArray)).toBe(false);
    expect(isNullishOrEmpty($emptyArrayLike)).toBe(false);
    expect(isNullishOrEmpty($arrayLike)).toBe(false);
    expect(isNullishOrEmpty($nonArrayLike1)).toBe(false);
    expect(isNullishOrEmpty($nonArrayLike2)).toBe(false);
    expect(isNullishOrEmpty($nonArrayLike3)).toBe(false);
    expect(isNullishOrEmpty($emptyList)).toBe(false);
    expect(isNullishOrEmpty($list)).toBe(false);
    expect(isNullishOrEmpty($map)).toBe(false);
    expect(isNullishOrEmpty($set)).toBe(false);
    expect(isNullishOrEmpty($queue)).toBe(false);
    expect(isNullishOrEmpty($stack)).toBe(false);
    expect(isNullishOrEmpty($lazy)).toBe(false);
    expect(isNullishOrEmpty($readableStream)).toBe(false);
    expect(isNullishOrEmpty($promise)).toBe(false);
    expect(isNullishOrEmpty($xpromise)).toBe(false);
    expect(isNullishOrEmpty($promiseLike)).toBe(false);
    expect(isNullishOrEmpty($nonPromiseLike)).toBe(false);
  });

  test("isNullishOrWhitespace", () => {
    expect(isNullishOrWhitespace($null)).toBe(true);
    expect(isNullishOrWhitespace($undefined)).toBe(true);
    expect(isNullishOrWhitespace($emptyString)).toBe(true);
    expect(isNullishOrWhitespace($whitespaceString)).toBe(true);

    expect(isNullishOrWhitespace($true)).toBe(false);
    expect(isNullishOrWhitespace($false)).toBe(false);
    expect(isNullishOrWhitespace($trueObject)).toBe(false);
    expect(isNullishOrWhitespace($falseObject)).toBe(false);
    expect(isNullishOrWhitespace($_1)).toBe(false);
    expect(isNullishOrWhitespace($0)).toBe(false);
    expect(isNullishOrWhitespace($_0)).toBe(false);
    expect(isNullishOrWhitespace($42)).toBe(false);
    expect(isNullishOrWhitespace($NaN)).toBe(false);
    expect(isNullishOrWhitespace($Infinity)).toBe(false);
    expect(isNullishOrWhitespace($_Infinity)).toBe(false);
    expect(isNullishOrWhitespace($_1Object)).toBe(false);
    expect(isNullishOrWhitespace($0Object)).toBe(false);
    expect(isNullishOrWhitespace($_0Object)).toBe(false);
    expect(isNullishOrWhitespace($42Object)).toBe(false);
    expect(isNullishOrWhitespace($NaNObject)).toBe(false);
    expect(isNullishOrWhitespace($InfinityObject)).toBe(false);
    expect(isNullishOrWhitespace($_InfinityObject)).toBe(false);
    expect(isNullishOrWhitespace($_1BigInt)).toBe(false);
    expect(isNullishOrWhitespace($0BigInt)).toBe(false);
    expect(isNullishOrWhitespace($_0BigInt)).toBe(false);
    expect(isNullishOrWhitespace($42BigInt)).toBe(false);
    expect(isNullishOrWhitespace($string)).toBe(false);
    expect(isNullishOrWhitespace($emptyStringObject)).toBe(false);
    expect(isNullishOrWhitespace($whitespaceStringObject)).toBe(false);
    expect(isNullishOrWhitespace($stringObject)).toBe(false);
    expect(isNullishOrWhitespace($emptySymbol)).toBe(false);
    expect(isNullishOrWhitespace($symbol)).toBe(false);
    expect(isNullishOrWhitespace($arrowFunction)).toBe(false);
    expect(isNullishOrWhitespace($functionExpression)).toBe(false);
    expect(isNullishOrWhitespace($functionObject)).toBe(false);
    expect(isNullishOrWhitespace($class)).toBe(false);
    expect(isNullishOrWhitespace($emptyObject)).toBe(false);
    expect(isNullishOrWhitespace($nullPrototypeObject)).toBe(false);
    expect(isNullishOrWhitespace($date)).toBe(false);
    expect(isNullishOrWhitespace($emptyArray)).toBe(false);
    expect(isNullishOrWhitespace($array)).toBe(false);
    expect(isNullishOrWhitespace($sparseArray)).toBe(false);
    expect(isNullishOrWhitespace($emptyArrayLike)).toBe(false);
    expect(isNullishOrWhitespace($arrayLike)).toBe(false);
    expect(isNullishOrWhitespace($nonArrayLike1)).toBe(false);
    expect(isNullishOrWhitespace($nonArrayLike2)).toBe(false);
    expect(isNullishOrWhitespace($nonArrayLike3)).toBe(false);
    expect(isNullishOrWhitespace($emptyList)).toBe(false);
    expect(isNullishOrWhitespace($list)).toBe(false);
    expect(isNullishOrWhitespace($map)).toBe(false);
    expect(isNullishOrWhitespace($set)).toBe(false);
    expect(isNullishOrWhitespace($queue)).toBe(false);
    expect(isNullishOrWhitespace($stack)).toBe(false);
    expect(isNullishOrWhitespace($lazy)).toBe(false);
    expect(isNullishOrWhitespace($readableStream)).toBe(false);
    expect(isNullishOrWhitespace($promise)).toBe(false);
    expect(isNullishOrWhitespace($xpromise)).toBe(false);
    expect(isNullishOrWhitespace($promiseLike)).toBe(false);
    expect(isNullishOrWhitespace($nonPromiseLike)).toBe(false);
  });

  test("isNullish", () => {
    expect(isNullish($null)).toBe(true);
    expect(isNullish($undefined)).toBe(true);

    expect(isNullish($true)).toBe(false);
    expect(isNullish($false)).toBe(false);
    expect(isNullish($trueObject)).toBe(false);
    expect(isNullish($falseObject)).toBe(false);
    expect(isNullish($_1)).toBe(false);
    expect(isNullish($0)).toBe(false);
    expect(isNullish($_0)).toBe(false);
    expect(isNullish($42)).toBe(false);
    expect(isNullish($NaN)).toBe(false);
    expect(isNullish($Infinity)).toBe(false);
    expect(isNullish($_Infinity)).toBe(false);
    expect(isNullish($_1Object)).toBe(false);
    expect(isNullish($0Object)).toBe(false);
    expect(isNullish($_0Object)).toBe(false);
    expect(isNullish($42Object)).toBe(false);
    expect(isNullish($NaNObject)).toBe(false);
    expect(isNullish($InfinityObject)).toBe(false);
    expect(isNullish($_InfinityObject)).toBe(false);
    expect(isNullish($_1BigInt)).toBe(false);
    expect(isNullish($0BigInt)).toBe(false);
    expect(isNullish($_0BigInt)).toBe(false);
    expect(isNullish($42BigInt)).toBe(false);
    expect(isNullish($emptyString)).toBe(false);
    expect(isNullish($whitespaceString)).toBe(false);
    expect(isNullish($string)).toBe(false);
    expect(isNullish($emptyStringObject)).toBe(false);
    expect(isNullish($whitespaceStringObject)).toBe(false);
    expect(isNullish($stringObject)).toBe(false);
    expect(isNullish($emptySymbol)).toBe(false);
    expect(isNullish($symbol)).toBe(false);
    expect(isNullish($arrowFunction)).toBe(false);
    expect(isNullish($functionExpression)).toBe(false);
    expect(isNullish($functionObject)).toBe(false);
    expect(isNullish($class)).toBe(false);
    expect(isNullish($emptyObject)).toBe(false);
    expect(isNullish($nullPrototypeObject)).toBe(false);
    expect(isNullish($date)).toBe(false);
    expect(isNullish($emptyArray)).toBe(false);
    expect(isNullish($array)).toBe(false);
    expect(isNullish($sparseArray)).toBe(false);
    expect(isNullish($emptyArrayLike)).toBe(false);
    expect(isNullish($arrayLike)).toBe(false);
    expect(isNullish($nonArrayLike1)).toBe(false);
    expect(isNullish($nonArrayLike2)).toBe(false);
    expect(isNullish($nonArrayLike3)).toBe(false);
    expect(isNullish($emptyList)).toBe(false);
    expect(isNullish($list)).toBe(false);
    expect(isNullish($map)).toBe(false);
    expect(isNullish($set)).toBe(false);
    expect(isNullish($queue)).toBe(false);
    expect(isNullish($stack)).toBe(false);
    expect(isNullish($lazy)).toBe(false);
    expect(isNullish($readableStream)).toBe(false);
    expect(isNullish($promise)).toBe(false);
    expect(isNullish($xpromise)).toBe(false);
    expect(isNullish($promiseLike)).toBe(false);
    expect(isNullish($nonPromiseLike)).toBe(false);
  });

  test("isNumber", () => {
    expect(isNumber($_1)).toBe(true);
    expect(isNumber($0)).toBe(true);
    expect(isNumber($_0)).toBe(true);
    expect(isNumber($42)).toBe(true);
    expect(isNumber($NaN)).toBe(true);
    expect(isNumber($Infinity)).toBe(true);
    expect(isNumber($_Infinity)).toBe(true);

    expect(isNumber($null)).toBe(false);
    expect(isNumber($undefined)).toBe(false);
    expect(isNumber($true)).toBe(false);
    expect(isNumber($false)).toBe(false);
    expect(isNumber($trueObject)).toBe(false);
    expect(isNumber($falseObject)).toBe(false);
    expect(isNumber($_1Object)).toBe(false);
    expect(isNumber($0Object)).toBe(false);
    expect(isNumber($_0Object)).toBe(false);
    expect(isNumber($42Object)).toBe(false);
    expect(isNumber($NaNObject)).toBe(false);
    expect(isNumber($InfinityObject)).toBe(false);
    expect(isNumber($_InfinityObject)).toBe(false);
    expect(isNumber($_1BigInt)).toBe(false);
    expect(isNumber($0BigInt)).toBe(false);
    expect(isNumber($_0BigInt)).toBe(false);
    expect(isNumber($42BigInt)).toBe(false);
    expect(isNumber($emptyString)).toBe(false);
    expect(isNumber($whitespaceString)).toBe(false);
    expect(isNumber($string)).toBe(false);
    expect(isNumber($emptyStringObject)).toBe(false);
    expect(isNumber($whitespaceStringObject)).toBe(false);
    expect(isNumber($stringObject)).toBe(false);
    expect(isNumber($emptySymbol)).toBe(false);
    expect(isNumber($symbol)).toBe(false);
    expect(isNumber($arrowFunction)).toBe(false);
    expect(isNumber($functionExpression)).toBe(false);
    expect(isNumber($functionObject)).toBe(false);
    expect(isNumber($class)).toBe(false);
    expect(isNumber($emptyObject)).toBe(false);
    expect(isNumber($nullPrototypeObject)).toBe(false);
    expect(isNumber($date)).toBe(false);
    expect(isNumber($emptyArray)).toBe(false);
    expect(isNumber($array)).toBe(false);
    expect(isNumber($sparseArray)).toBe(false);
    expect(isNumber($emptyArrayLike)).toBe(false);
    expect(isNumber($arrayLike)).toBe(false);
    expect(isNumber($nonArrayLike1)).toBe(false);
    expect(isNumber($nonArrayLike2)).toBe(false);
    expect(isNumber($nonArrayLike3)).toBe(false);
    expect(isNumber($emptyList)).toBe(false);
    expect(isNumber($list)).toBe(false);
    expect(isNumber($map)).toBe(false);
    expect(isNumber($set)).toBe(false);
    expect(isNumber($queue)).toBe(false);
    expect(isNumber($stack)).toBe(false);
    expect(isNumber($lazy)).toBe(false);
    expect(isNumber($readableStream)).toBe(false);
    expect(isNumber($promise)).toBe(false);
    expect(isNumber($xpromise)).toBe(false);
    expect(isNumber($promiseLike)).toBe(false);
    expect(isNumber($nonPromiseLike)).toBe(false);
  });

  test("isObject", () => {
    expect(isObject($trueObject)).toBe(true);
    expect(isObject($falseObject)).toBe(true);
    expect(isObject($_1Object)).toBe(true);
    expect(isObject($0Object)).toBe(true);
    expect(isObject($_0Object)).toBe(true);
    expect(isObject($42Object)).toBe(true);
    expect(isObject($NaNObject)).toBe(true);
    expect(isObject($InfinityObject)).toBe(true);
    expect(isObject($_InfinityObject)).toBe(true);
    expect(isObject($emptyStringObject)).toBe(true);
    expect(isObject($whitespaceStringObject)).toBe(true);
    expect(isObject($stringObject)).toBe(true);
    expect(isObject($emptyObject)).toBe(true);
    expect(isObject($nullPrototypeObject)).toBe(true);
    expect(isObject($date)).toBe(true);
    expect(isObject($emptyArray)).toBe(true);
    expect(isObject($array)).toBe(true);
    expect(isObject($sparseArray)).toBe(true);
    expect(isObject($emptyArrayLike)).toBe(true);
    expect(isObject($arrayLike)).toBe(true);
    expect(isObject($nonArrayLike1)).toBe(true);
    expect(isObject($nonArrayLike2)).toBe(true);
    expect(isObject($nonArrayLike3)).toBe(true);
    expect(isObject($emptyList)).toBe(true);
    expect(isObject($list)).toBe(true);
    expect(isObject($map)).toBe(true);
    expect(isObject($set)).toBe(true);
    expect(isObject($queue)).toBe(true);
    expect(isObject($stack)).toBe(true);
    expect(isObject($lazy)).toBe(true);
    expect(isObject($readableStream)).toBe(true);
    expect(isObject($promise)).toBe(true);
    expect(isObject($xpromise)).toBe(true);
    expect(isObject($promiseLike)).toBe(true);
    expect(isObject($nonPromiseLike)).toBe(true);

    expect(isObject($null)).toBe(false);
    expect(isObject($undefined)).toBe(false);
    expect(isObject($true)).toBe(false);
    expect(isObject($false)).toBe(false);
    expect(isObject($_1)).toBe(false);
    expect(isObject($0)).toBe(false);
    expect(isObject($_0)).toBe(false);
    expect(isObject($42)).toBe(false);
    expect(isObject($NaN)).toBe(false);
    expect(isObject($Infinity)).toBe(false);
    expect(isObject($_Infinity)).toBe(false);
    expect(isObject($_1BigInt)).toBe(false);
    expect(isObject($0BigInt)).toBe(false);
    expect(isObject($_0BigInt)).toBe(false);
    expect(isObject($42BigInt)).toBe(false);
    expect(isObject($emptyString)).toBe(false);
    expect(isObject($whitespaceString)).toBe(false);
    expect(isObject($string)).toBe(false);
    expect(isObject($emptySymbol)).toBe(false);
    expect(isObject($symbol)).toBe(false);
    expect(isObject($arrowFunction)).toBe(false);
    expect(isObject($functionExpression)).toBe(false);
    expect(isObject($functionObject)).toBe(false);
    expect(isObject($class)).toBe(false);
  });

  test("isPlainObject", () => {
    expect(isPlainObject($emptyObject)).toBe(true);
    expect(isPlainObject($nullPrototypeObject)).toBe(true);
    expect(isPlainObject($emptyArrayLike)).toBe(true);
    expect(isPlainObject($arrayLike)).toBe(true);
    expect(isPlainObject($nonArrayLike1)).toBe(true);
    expect(isPlainObject($nonArrayLike2)).toBe(true);
    expect(isPlainObject($nonArrayLike3)).toBe(true);
    expect(isPlainObject($promiseLike)).toBe(true);
    expect(isPlainObject($nonPromiseLike)).toBe(true);

    expect(isPlainObject($null)).toBe(false);
    expect(isPlainObject($undefined)).toBe(false);
    expect(isPlainObject($true)).toBe(false);
    expect(isPlainObject($false)).toBe(false);
    expect(isPlainObject($trueObject)).toBe(false);
    expect(isPlainObject($falseObject)).toBe(false);
    expect(isPlainObject($_1)).toBe(false);
    expect(isPlainObject($0)).toBe(false);
    expect(isPlainObject($_0)).toBe(false);
    expect(isPlainObject($42)).toBe(false);
    expect(isPlainObject($NaN)).toBe(false);
    expect(isPlainObject($Infinity)).toBe(false);
    expect(isPlainObject($_Infinity)).toBe(false);
    expect(isPlainObject($_1Object)).toBe(false);
    expect(isPlainObject($0Object)).toBe(false);
    expect(isPlainObject($_0Object)).toBe(false);
    expect(isPlainObject($42Object)).toBe(false);
    expect(isPlainObject($NaNObject)).toBe(false);
    expect(isPlainObject($InfinityObject)).toBe(false);
    expect(isPlainObject($_InfinityObject)).toBe(false);
    expect(isPlainObject($_1BigInt)).toBe(false);
    expect(isPlainObject($0BigInt)).toBe(false);
    expect(isPlainObject($_0BigInt)).toBe(false);
    expect(isPlainObject($42BigInt)).toBe(false);
    expect(isPlainObject($emptyString)).toBe(false);
    expect(isPlainObject($whitespaceString)).toBe(false);
    expect(isPlainObject($string)).toBe(false);
    expect(isPlainObject($emptyStringObject)).toBe(false);
    expect(isPlainObject($whitespaceStringObject)).toBe(false);
    expect(isPlainObject($stringObject)).toBe(false);
    expect(isPlainObject($emptySymbol)).toBe(false);
    expect(isPlainObject($symbol)).toBe(false);
    expect(isPlainObject($arrowFunction)).toBe(false);
    expect(isPlainObject($functionExpression)).toBe(false);
    expect(isPlainObject($functionObject)).toBe(false);
    expect(isPlainObject($class)).toBe(false);
    expect(isPlainObject($date)).toBe(false);
    expect(isPlainObject($emptyArray)).toBe(false);
    expect(isPlainObject($array)).toBe(false);
    expect(isPlainObject($sparseArray)).toBe(false);
    expect(isPlainObject($emptyList)).toBe(false);
    expect(isPlainObject($list)).toBe(false);
    expect(isPlainObject($map)).toBe(false);
    expect(isPlainObject($set)).toBe(false);
    expect(isPlainObject($queue)).toBe(false);
    expect(isPlainObject($stack)).toBe(false);
    expect(isPlainObject($lazy)).toBe(false);
    expect(isPlainObject($readableStream)).toBe(false);
    expect(isPlainObject($promise)).toBe(false);
    expect(isPlainObject($xpromise)).toBe(false);
  });

  test("isPromiseLike", () => {
    expect(isPromiseLike($promise)).toBe(true);
    expect(isPromiseLike($xpromise)).toBe(true);
    expect(isPromiseLike($promiseLike)).toBe(true);

    expect(isPromiseLike($null)).toBe(false);
    expect(isPromiseLike($undefined)).toBe(false);
    expect(isPromiseLike($true)).toBe(false);
    expect(isPromiseLike($false)).toBe(false);
    expect(isPromiseLike($trueObject)).toBe(false);
    expect(isPromiseLike($falseObject)).toBe(false);
    expect(isPromiseLike($_1)).toBe(false);
    expect(isPromiseLike($0)).toBe(false);
    expect(isPromiseLike($_0)).toBe(false);
    expect(isPromiseLike($42)).toBe(false);
    expect(isPromiseLike($NaN)).toBe(false);
    expect(isPromiseLike($Infinity)).toBe(false);
    expect(isPromiseLike($_Infinity)).toBe(false);
    expect(isPromiseLike($_1Object)).toBe(false);
    expect(isPromiseLike($0Object)).toBe(false);
    expect(isPromiseLike($_0Object)).toBe(false);
    expect(isPromiseLike($42Object)).toBe(false);
    expect(isPromiseLike($NaNObject)).toBe(false);
    expect(isPromiseLike($InfinityObject)).toBe(false);
    expect(isPromiseLike($_InfinityObject)).toBe(false);
    expect(isPromiseLike($_1BigInt)).toBe(false);
    expect(isPromiseLike($0BigInt)).toBe(false);
    expect(isPromiseLike($_0BigInt)).toBe(false);
    expect(isPromiseLike($42BigInt)).toBe(false);
    expect(isPromiseLike($emptyString)).toBe(false);
    expect(isPromiseLike($whitespaceString)).toBe(false);
    expect(isPromiseLike($string)).toBe(false);
    expect(isPromiseLike($emptyStringObject)).toBe(false);
    expect(isPromiseLike($whitespaceStringObject)).toBe(false);
    expect(isPromiseLike($stringObject)).toBe(false);
    expect(isPromiseLike($emptySymbol)).toBe(false);
    expect(isPromiseLike($symbol)).toBe(false);
    expect(isPromiseLike($arrowFunction)).toBe(false);
    expect(isPromiseLike($functionExpression)).toBe(false);
    expect(isPromiseLike($functionObject)).toBe(false);
    expect(isPromiseLike($class)).toBe(false);
    expect(isPromiseLike($emptyObject)).toBe(false);
    expect(isPromiseLike($nullPrototypeObject)).toBe(false);
    expect(isPromiseLike($date)).toBe(false);
    expect(isPromiseLike($emptyArray)).toBe(false);
    expect(isPromiseLike($array)).toBe(false);
    expect(isPromiseLike($sparseArray)).toBe(false);
    expect(isPromiseLike($emptyArrayLike)).toBe(false);
    expect(isPromiseLike($arrayLike)).toBe(false);
    expect(isPromiseLike($nonArrayLike1)).toBe(false);
    expect(isPromiseLike($nonArrayLike2)).toBe(false);
    expect(isPromiseLike($nonArrayLike3)).toBe(false);
    expect(isPromiseLike($emptyList)).toBe(false);
    expect(isPromiseLike($list)).toBe(false);
    expect(isPromiseLike($map)).toBe(false);
    expect(isPromiseLike($set)).toBe(false);
    expect(isPromiseLike($queue)).toBe(false);
    expect(isPromiseLike($stack)).toBe(false);
    expect(isPromiseLike($lazy)).toBe(false);
    expect(isPromiseLike($readableStream)).toBe(false);
    expect(isPromiseLike($nonPromiseLike)).toBe(false);
  });

  test("isString", () => {
    expect(isString($emptyString)).toBe(true);
    expect(isString($whitespaceString)).toBe(true);
    expect(isString($string)).toBe(true);

    expect(isString($null)).toBe(false);
    expect(isString($undefined)).toBe(false);
    expect(isString($true)).toBe(false);
    expect(isString($false)).toBe(false);
    expect(isString($trueObject)).toBe(false);
    expect(isString($falseObject)).toBe(false);
    expect(isString($_1)).toBe(false);
    expect(isString($0)).toBe(false);
    expect(isString($_0)).toBe(false);
    expect(isString($42)).toBe(false);
    expect(isString($NaN)).toBe(false);
    expect(isString($Infinity)).toBe(false);
    expect(isString($_Infinity)).toBe(false);
    expect(isString($_1Object)).toBe(false);
    expect(isString($0Object)).toBe(false);
    expect(isString($_0Object)).toBe(false);
    expect(isString($42Object)).toBe(false);
    expect(isString($NaNObject)).toBe(false);
    expect(isString($InfinityObject)).toBe(false);
    expect(isString($_InfinityObject)).toBe(false);
    expect(isString($_1BigInt)).toBe(false);
    expect(isString($0BigInt)).toBe(false);
    expect(isString($_0BigInt)).toBe(false);
    expect(isString($42BigInt)).toBe(false);
    expect(isString($emptyStringObject)).toBe(false);
    expect(isString($whitespaceStringObject)).toBe(false);
    expect(isString($stringObject)).toBe(false);
    expect(isString($emptySymbol)).toBe(false);
    expect(isString($symbol)).toBe(false);
    expect(isString($arrowFunction)).toBe(false);
    expect(isString($functionExpression)).toBe(false);
    expect(isString($functionObject)).toBe(false);
    expect(isString($class)).toBe(false);
    expect(isString($emptyObject)).toBe(false);
    expect(isString($nullPrototypeObject)).toBe(false);
    expect(isString($date)).toBe(false);
    expect(isString($emptyArray)).toBe(false);
    expect(isString($array)).toBe(false);
    expect(isString($sparseArray)).toBe(false);
    expect(isString($emptyArrayLike)).toBe(false);
    expect(isString($arrayLike)).toBe(false);
    expect(isString($nonArrayLike1)).toBe(false);
    expect(isString($nonArrayLike2)).toBe(false);
    expect(isString($nonArrayLike3)).toBe(false);
    expect(isString($emptyList)).toBe(false);
    expect(isString($list)).toBe(false);
    expect(isString($map)).toBe(false);
    expect(isString($set)).toBe(false);
    expect(isString($queue)).toBe(false);
    expect(isString($stack)).toBe(false);
    expect(isString($lazy)).toBe(false);
    expect(isString($readableStream)).toBe(false);
    expect(isString($promise)).toBe(false);
    expect(isString($xpromise)).toBe(false);
    expect(isString($promiseLike)).toBe(false);
    expect(isString($nonPromiseLike)).toBe(false);
  });

  test("isSymbol", () => {
    expect(isSymbol($emptySymbol)).toBe(true);
    expect(isSymbol($symbol)).toBe(true);

    expect(isSymbol($null)).toBe(false);
    expect(isSymbol($undefined)).toBe(false);
    expect(isSymbol($true)).toBe(false);
    expect(isSymbol($false)).toBe(false);
    expect(isSymbol($trueObject)).toBe(false);
    expect(isSymbol($falseObject)).toBe(false);
    expect(isSymbol($_1)).toBe(false);
    expect(isSymbol($0)).toBe(false);
    expect(isSymbol($_0)).toBe(false);
    expect(isSymbol($42)).toBe(false);
    expect(isSymbol($NaN)).toBe(false);
    expect(isSymbol($Infinity)).toBe(false);
    expect(isSymbol($_Infinity)).toBe(false);
    expect(isSymbol($_1Object)).toBe(false);
    expect(isSymbol($0Object)).toBe(false);
    expect(isSymbol($_0Object)).toBe(false);
    expect(isSymbol($42Object)).toBe(false);
    expect(isSymbol($NaNObject)).toBe(false);
    expect(isSymbol($InfinityObject)).toBe(false);
    expect(isSymbol($_InfinityObject)).toBe(false);
    expect(isSymbol($_1BigInt)).toBe(false);
    expect(isSymbol($0BigInt)).toBe(false);
    expect(isSymbol($_0BigInt)).toBe(false);
    expect(isSymbol($42BigInt)).toBe(false);
    expect(isSymbol($emptyString)).toBe(false);
    expect(isSymbol($whitespaceString)).toBe(false);
    expect(isSymbol($string)).toBe(false);
    expect(isSymbol($emptyStringObject)).toBe(false);
    expect(isSymbol($whitespaceStringObject)).toBe(false);
    expect(isSymbol($stringObject)).toBe(false);
    expect(isSymbol($arrowFunction)).toBe(false);
    expect(isSymbol($functionExpression)).toBe(false);
    expect(isSymbol($functionObject)).toBe(false);
    expect(isSymbol($class)).toBe(false);
    expect(isSymbol($emptyObject)).toBe(false);
    expect(isSymbol($nullPrototypeObject)).toBe(false);
    expect(isSymbol($date)).toBe(false);
    expect(isSymbol($emptyArray)).toBe(false);
    expect(isSymbol($array)).toBe(false);
    expect(isSymbol($sparseArray)).toBe(false);
    expect(isSymbol($emptyArrayLike)).toBe(false);
    expect(isSymbol($arrayLike)).toBe(false);
    expect(isSymbol($nonArrayLike1)).toBe(false);
    expect(isSymbol($nonArrayLike2)).toBe(false);
    expect(isSymbol($nonArrayLike3)).toBe(false);
    expect(isSymbol($emptyList)).toBe(false);
    expect(isSymbol($list)).toBe(false);
    expect(isSymbol($map)).toBe(false);
    expect(isSymbol($set)).toBe(false);
    expect(isSymbol($queue)).toBe(false);
    expect(isSymbol($stack)).toBe(false);
    expect(isSymbol($lazy)).toBe(false);
    expect(isSymbol($readableStream)).toBe(false);
    expect(isSymbol($promise)).toBe(false);
    expect(isSymbol($xpromise)).toBe(false);
    expect(isSymbol($promiseLike)).toBe(false);
    expect(isSymbol($nonPromiseLike)).toBe(false);
  });

});
